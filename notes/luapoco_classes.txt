* DirectoryWatcher
----------------------------------------
1. There are events which require a Poco::Delegate() to be operator+='d
	onto the Event but the Delegate is dispatched from the thread 
	spawned by the DirectoryWatcher, so the FileEvent structure will 
	need to be copied to the Lua thread, then a syncronization method
	used to block the Delegate from returning until the Lua thread returns.
2. DirectoryWatcher can be constructed with a table of lua Functions that
	correspond to each event Delegate callback.

* NotificationCenter
----------------------------------------
PocoNote: In a multithreaded scenario, notifications are always delivered in 
	the thread in which the notification was posted, which may not be 
	the same thread in which an observer registered itself.
1. Lua doesn't have a concept of thread interruption, so Notifications 
	will need to be delivered to a lua state that is either blocked on a
	run() call and the callbacks are dispatched, or perhaps there would
	be a function that polls for new notifications.

* NotificationQueue
----------------------------------------
PocoNote 1: Special care must be taken when shutting down a queue with worker threads waiting for notifications. The recommended sequence to shut down and destroy the queue is to
	set a termination flag for every worker thread
	call the wakeUpAll() method
	join each worker thread
	destroy the notification queue.

PocoNote 2: How to tell worker threads they are done?
	1. Post a special QuitNotification for every worker thread;
	2. Set a (global) stop flag and use waitDequeueNotification() with a timeout;
	3. Use wakeUpAll(): every call to waitDequeueNotification() will immediately return null.

* TaskManager
----------------------------------------
1.  It makes sense to funnel NotificationCenter messages to the lua_State that owns the TaskManager
	object via a NotificationQueue.  That thread could then use the dequeue mechanism with a timeout or whatever
	to acquire notifications.
2.  Using the mechanism above, it would be possible to employ a run() method to dispatch to some callbacks in the
	owning lua_State, with some locking around the lua_State itself.
	
* Task
----------------------------------------
1. Has one userdata representing 'self' in a thread, and another userdata 
	representing the task in the main thread.
2. Tasks are not constructed explicitly, but created by start() member on the
	TaskManager and a userdata is stored in the registry.
3. LuaTask class has a getRegistryIdx() function such that when the TaskManager
	sends a notification to the main thread, the Task pointer can be cast to a
	LuaTask and the userdata associated with it can be retrieved from the registry
	and returned to Lua.
4. Tasks can post LuaNotification's to the TaskManager which encompass a 
	copyable Poco userdata or a basic Lua type? (copyable userdata is a lot of code 
	to manage, unless each class implements a bool copyToState(lua_State* L) 
	function.)

* Foundation classes to bind
----------------------------------------
- Ascii, Buffer?, ByteOrder
MemoryPool? (perhaps useful for i/o from streams), NumberFormatter (not terribly useful given string.format, but maybe for int64s)
- NumberParser (same as above), StringTokenizer, Cache (and variants there of, difficult due to templates)
- DigestEngine (HMACEngine, MD4, MD5, SHA1 Engines), DigestInputStream/DigestOutputStream?
- Random, RandomInputStream
- DateTime, DateTimeFormat(er), DateTimeParser, LocalDateTime, Stopwatch, Timespan, Timezone
- DirectoryIterator, DirectoryWatcher, Glob, TemporaryFile
- Logging, (*)Channel, 
- Notification, NotificationQueue, PriorityNotificationQueue, TimedNotificationQueue
- SharedMemory
- (Streams aka ios_base) Base64, MemoryStream, BinaryReader/Writer, Counting?, 
	HexBinaryDecoder/Encoder, LineEndingConverter?, Memory, Null, StreamCopier, StreamTokenizer
	Tee (Most complicated thing here is how to represent arbitrary iostream userdata in a nice generic way to Lua)
- Task, TaskManager, TaskNotification
- TextEncoding, TextConverter, TextIterator, Unicode, UnicodeConverter
- Condition, ErrorHandler, RWLock, Semaphore, ThreadPool, Timer
- URI, URIRedirection?, URIStreamOpener, UUID, UUIDGenerator


* Net classes to bind
----------------------------------------
- FTPClientSession, FTPStreamFactory, FTPPasswordProvider
- HTMLForm
- HTTPAuthenticationParams, HTTPBasicCredentials,HTTPChunkedInputStream, HTTPChunkedOutputStream
- HTTPCookie, HTTPCredentials, HTTPDigestCredentials, HTTPHeaderInputStream, HTTPHeaderOutputStream
- HTTPMessage?, HTTPRequest, HTTPResponse, HTTPClientSession, 


* NetSSL classes to bind
----------------------------------------
- HTTPSClientSession, SecureSMTPClientSession, SecureStreamSocket, SecureServerSocket
- SSLManager, Context, Session, Utility, PrivateKeyPassphraseHandler
